import net.reliableresponse.notification.broker.BrokerFactory;
import net.reliableresponse.notification.broker.*;
import net.reliableresponse.notification.broker.impl.clustered.*;
import net.reliableresponse.notification.device.*;
import net.reliableresponse.notification.sender.*;
import net.reliableresponse.notification.*;
import net.reliableresponse.notification.usermgmt.*;

public class ClusterManager {
	
	public void invalidateUser (String uuid) {
		UserMgmtBroker broker = BrokerFactory.getUserMgmtBroker();
		if (broker instanceof ClusteredUserMgmtBroker) {
			try {
			((ClusteredUserMgmtBroker)broker).invalidateUser(uuid);
			} catch (Exception e) {
				BrokerFactory.getLoggingBroker().logError (e);
			} catch (Error e) {
				BrokerFactory.getLoggingBroker().logError (e);
			}
		}
	}

	public void invalidateGroup (String uuid) {
		GroupMgmtBroker broker = BrokerFactory.getGroupMgmtBroker();
		if (broker instanceof ClusteredGroupMgmtBroker) {
			((ClusteredGroupMgmtBroker)broker).invalidateGroup(uuid);
		}
		
	}

	public void invalidateNotification (String uuid) {
		NotificationBroker broker = BrokerFactory.getNotificationBroker();
		if (broker instanceof ClusteredNotificationBroker) {
			((ClusteredNotificationBroker)broker).invalidateNotification(uuid);
		}

	}
	
	public void invalidateRole (String role) {
		AuthorizationBroker broker = BrokerFactory.getAuthorizationBroker();
		if (broker instanceof ClusteredAuthorizationBroker) {
			((ClusteredAuthorizationBroker)broker).invalidateRole(role);
		}

	}
	
	public Boolean doYouOwn(String service) {
		return new Boolean(ClusteredServiceManager.getInstance().isOwner(service));
	}

	public Boolean ping() {
		return new Boolean(true);
	}
	
	/**
	* This allows you to send a notification remotely.  It's mainly used for devices
	* that are clustered, where only 1 machine can run it at a time.  Like AIM and 
	* SameTime.  This allows the machine that's *not* running the service to ask
	* the machine that is to send the notification.
	*/
	
	public void sendPersistentNotificationToDevice (String notificationUuid, String deviceUuid) throws NotificationException {
		Notification notification = BrokerFactory.getNotificationBroker().getNotificationByUuid (notificationUuid);
		Device device = BrokerFactory.getDeviceBroker().getDeviceByUuid (deviceUuid);
		
		if ((notification != null) && (device != null)) {
			device.getNotificationProvider().sendNotification (notification, device);
		}
	}
	
	/**
	* This allows you to send a non-persistent notification remotely.  It's similar to
	* sendNotificationToDevice, but you can use it with a non-persistent notification
	*/
	public void sendNonpersistentNotificationToDevice (String recipientUuid,
														String subject, String message,
														String senderName,
														String deviceUuid) throws NotificationException  {
		User recipient = BrokerFactory.getUserMgmtBroker().getUserByUuid (recipientUuid);
		NonResponseSender sender = new NonResponseSender (senderName);
		Notification notification = new Notification (null, recipient, sender, subject, message);
		notification.setPersistent(false);
		
		Device device = BrokerFactory.getDeviceBroker().getDeviceByUuid (deviceUuid);
		
		if ((notification != null) && (device != null)) {
			device.getNotificationProvider().sendNotification (notification, device);
		}
	}
}