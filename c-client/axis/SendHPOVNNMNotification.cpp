/*
 * This file was auto-generated by the Axis C++ Web Service Generator (WSDL2Ws)
 * This file contains Client Stub implementation for remote web service.
 */

#include "SendNotification.h"

#include <axis/server/AxisWrapperAPI.h>

using namespace std;

 SendNotification::SendNotification(const char* pchEndpointUri, AXIS_PROTOCOL_TYPE eProtocol)
:Stub(pchEndpointUri, eProtocol)
{
	m_pCall->setEndpointURI(pchEndpointUri);
}

SendNotification::SendNotification(xsd__string url)
:Stub(" ", APTHTTP)
{
	m_pCall->setEndpointURI(url);
}

SendNotification::~SendNotification()
{
}


/*Methods corresponding to the web service methods*/

/*
 * This method wrap the service method sendNotification
 */
xsd__string SendNotification::sendNotification(xsd__string url, 
			xsd__string recipient, 
			xsd__string subject, 
			xsd__string message)
{
	xsd__string Ret;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return Ret;
		m_pCall->setEndpointURI(url);
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("sendNotification", url);
		applyUserPreferences();
		m_pCall->addParameter((void*)&recipient, "memberName", XSD_STRING);
		m_pCall->addParameter((void*)&subject, "summary", XSD_STRING);
		m_pCall->addParameter((void*)&message, "message", XSD_STRING);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("sendNotificationResponse", url))
			{
				Ret = m_pCall->getElementAsString("sendNotificationReturn", 0);
			}
		}
		m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			m_pCall->unInitialize();
			throw;
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault",url );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw AxisClientException(pSoapFault);
		}
		else throw;
	}
}


/*
 * This method wrap the service method sendNotificationToMany
 */
xsd__string_Array SendNotification::sendNotificationToMany(xsd__string url, 
			xsd__string_Array recipients, 
			xsd__string subject, 
			xsd__string message)
{
	xsd__string_Array RetArray = {NULL, 0};
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return RetArray;
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("sendNotificationToMany", url);
		applyUserPreferences();
		m_pCall->addBasicArrayParameter((Axis_Array*)(&recipients), XSD_STRING, "members");
		m_pCall->addParameter((void*)&subject, "summary", XSD_STRING);
		m_pCall->addParameter((void*)&message, "message", XSD_STRING);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("sendNotificationToManyResponse", url))
			{
				RetArray = (xsd__string_Array&)m_pCall->getBasicArray(XSD_STRING, "sendNotificationToManyReturn", 0);
			}
		}
		m_pCall->unInitialize();
		return RetArray;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			m_pCall->unInitialize();
			throw;
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault",url );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw AxisClientException(pSoapFault);
		}
		else throw;
	}
}

xsd__string SendNotification::sendNotificationToHPOVNNM(xsd__string url, 
			xsd__string recipient, 
			xsd__string subject, 
			xsd__string message,
			xsd__string hostname,
			xsd__int port,
			xsd__string uuid)
{
	xsd__string Ret;
	const char* pcCmplxFaultName;
	try
	{
		if (AXIS_SUCCESS != m_pCall->initialize(CPP_RPC_PROVIDER, NORMAL_CHANNEL)) 
			return Ret;
		m_pCall->setEndpointURI(url);
		m_pCall->setTransportProperty(SOAPACTION_HEADER , "");
		m_pCall->setSOAPVersion(SOAP_VER_1_1);
		m_pCall->setOperation("sendHPOVNNMNotification", url);
		applyUserPreferences();
		m_pCall->addParameter((void*)&recipient, "memberName", XSD_STRING);
		m_pCall->addParameter((void*)&subject, "summary", XSD_STRING);
		m_pCall->addParameter((void*)&message, "message", XSD_STRING);
		m_pCall->addParameter((void*)&hostname, "OVHost", XSD_STRING);
		m_pCall->addParameter((void*)&port, "OVPort", XSD_INT);
		m_pCall->addParameter((void*)&uuid, "alarmUUID", XSD_STRING);
		if (AXIS_SUCCESS == m_pCall->invoke())
		{
			if(AXIS_SUCCESS == m_pCall->checkMessage("sendHPOVNNMNotificationResponse", url))
			{
				Ret = m_pCall->getElementAsString("sendHPOVNNMNotificationReturn", 0);
			}
		}
		m_pCall->unInitialize();
		return Ret;
	}
	catch(AxisException& e)
	{
		int iExceptionCode = e.getExceptionCode();
		if(AXISC_NODE_VALUE_MISMATCH_EXCEPTION != iExceptionCode)
		{
			m_pCall->unInitialize();
			throw;
		}
		ISoapFault* pSoapFault = (ISoapFault*) m_pCall->checkFault("Fault",url );
		if(pSoapFault)
		{
			m_pCall->unInitialize();
			throw AxisClientException(pSoapFault);
		}
		else throw;
	}
}

int SendNotification::getFaultDetail(char** ppcDetail)
{
	return m_pCall->getFaultDetail(ppcDetail);
}

int main(int argc, char** argv) {

	SendNotification *sn;
	char *url, *recipient, *subject, *message, *uuid;
	xsd__string result;

	if (argc < 5)
	{
		printf ("Usage: SendNotification url recipient subject message uuid\n");
		return 0;
	}
	url = (char *)malloc (strlen(argv[1])+26);
	strcat (url, argv[1]);
	strcat (url, "/SendSOAPNotification.jws");
	recipient = argv[2];
	subject = argv[3];
	message = argv[4];
	uuid = argv[5];
	sn = new SendNotification(url);
	result = sn->sendNotificationToHPOVNNM (url, recipient, subject, message, "localhost", 2954, uuid);
	printf ("%s", result);
	
	return 0;
}
